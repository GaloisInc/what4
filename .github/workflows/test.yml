name: What4 CI
on:
  - push
  - pull_request

# This CI configuration uses nix tooling to obtain the needed GHC and
# cabal-install packages, as well as the external dependencies
# (solvers, libz, libgmp, etc.).  The cabal + cabal project files
# handle Haskell-level dependencies within the nix shell used for the
# build.
#
# Variable aspects of this CI configuration:
#
# * GHC versions
#   - specified in the strategy matrix
#   - provided via nix: ensure the nix base and NIXPKGS used provide the requested GHC version
# * nix tool version 2.11.0
#   - all nix operations use new tool suite and cmdline interface (available in 2.4+) instead of older format

# The CACHE_VERSION can be updated to force the use of a new cache if
# the current cache contents become corrupted/invalid.  This can
# sometimes happen when (for example) the OS version is changed but
# older .so files are cached, which can have various effects
# (e.g. cabal complains it can't find a valid version of the "happy"
# tool).
env:
  CACHE_VERSION: 4

jobs:
  genmatrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.gen-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Nix
        uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-21.11
          install_url: https://releases.nixos.org/nix/nix-2.11.0/install
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v10
        with:
          name: galois
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - id: gen-matrix
        run: |
          echo ::set-output name=matrix::$(nix run nixpkgs#swiProlog -- .github/workflows/gen_matrix.pl)

  linux:
    name: GHC-${{ matrix.ghc }} Z3-${{ matrix.z3 }} Yices-${{ matrix.yices }} CVC4-${{ matrix.cvc4 }} CVC5-${{ matrix.cvc5 }} STP-${{ matrix.stp }} Bitwuzla-${{ matrix.bitwuzla }} Boolector-${{ matrix.boolector }} ABC-${{ matrix.abc }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: genmatrix
    continue-on-error: false
    env:
      CI_TEST_LEVEL: "1"
    strategy:
      matrix: ${{fromJSON(needs.genmatrix.outputs.matrix)}}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Check Cabal/GHC compatibility
        uses: langston-barrett/.github/actions/cabal-ghc-compat@c5da9b8d498947193fe4635dd8917503bd2e34df
        with:
          dirs: what4 what4-abc what4-blt
          ghc: ${{ matrix.ghc }}
          pkgs: gmp pkg-config zlib zlib.dev
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: cachix/cachix-action@v10
        with:
          name: galois
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - uses: actions/cache/restore@v4
        name: Restore cabal store cache
        id: cache
        env:
          # NB: Each `matrix.os` (e.g., `ubuntu-22.04-arm`) uniquely determines
          # a `runner.arch` (e.g., ARM64), so there is no need to include the
          # latter as part of the cache key
          key: ${{ env.CACHE_VERSION }}-cabal-${{ matrix.os }}-ghc${{ matrix.ghc }}
        with:
          path: |
            ${{ steps.setup-haskell.outputs.cabal-store }}
            dist-newstyle
          key: |
            ${{ env.key }}-${{ github.ref }}
          restore-keys: |
            ${{ env.key }}-

      - name: Cabal update
        shell: bash
        run: $DO_IN_NIX_SHELL -c cabal update

      - name: Cabal check
        shell: bash
        run: |
          (cd what4;     $DO_IN_NIX_SHELL -c cabal check)
          (cd what4-abc; $DO_IN_NIX_SHELL -c cabal check)
          (cd what4-blt; $DO_IN_NIX_SHELL -c cabal check)

      - name: Cabal configure what4
        shell: bash
        # Note: the extra-lib-dirs and extra-include-dirs specified on
        # the command-line are placed at the top-level of the
        # generated cabal.project.local, but only apply to the primary
        # package.  The zlib dependency also needs these flags, so the
        # following adds a zlib package-specific stanza for these.
        run: |
          cd what4
          $DO_IN_NIX_SHELL -c cabal configure --enable-tests -fdRealTestDisable -fsolverTests --extra-lib-dirs=$(nix eval --raw ${GHC_NIXPKGS}#zlib)/lib --extra-include-dirs=$(nix eval --raw ${GHC_NIXPKGS}#zlib.dev)/include
          echo "" >> ../cabal.project.local
          echo package zlib >> ../cabal.project.local
          echo "  extra-lib-dirs: $(nix eval --raw ${GHC_NIXPKGS}#zlib)/lib" >> ../cabal.project.local
          echo "  extra-include-dirs: $(nix eval --raw ${GHC_NIXPKGS}#zlib.dev)/include" >> ../cabal.project.local
          cp ../cabal.project.local ./
          cat ../cabal.project.local

      - name: Build
        shell: bash
        run: |
          cd what4
          $DO_IN_NIX_SHELL -c cabal build

      - name: Test
        shell: bash
        run: |
          cd what4
          echo ABC version $(nix eval github:GaloisInc/flakes#abc.v${{ matrix.abc }}.version)
          echo Bitwuzla version $(nix run github:GaloisInc/flakes#bitwuzla.v${{ matrix.bitwuzla }} -- --version | head -n1)
          echo Boolector version $(nix run github:GaloisInc/flakes#boolector.v${{ matrix.boolector }} -- --version | head -n1)
          echo CVC4 version $(nix run github:GaloisInc/flakes#cvc4.v${{ matrix.cvc4 }} -- --version | head -n1)
          echo CVC5 version $(nix run github:GaloisInc/flakes#cvc5.v${{ matrix.cvc5 }} -- --version | head -n1)
          echo STP version $(nix run github:GaloisInc/flakes#stp.v${{ matrix.stp }} -- --version | head -n1)
          echo Yices version $(nix run github:GaloisInc/flakes#yices.v${{ matrix.yices }} -- --version | head -n1)
          echo Z3 version $(nix run github:GaloisInc/flakes#z3.v${{ matrix.z3 }} -- --version | head -n1)
          $DO_IN_NIX_SHELL \
            github:GaloisInc/flakes#abc.v${{ matrix.abc }} \
            github:GaloisInc/flakes#bitwuzla.v${{ matrix.bitwuzla }} \
            github:GaloisInc/flakes#boolector.v${{ matrix.boolector }} \
            github:GaloisInc/flakes#cvc4.v${{ matrix.cvc4 }} \
            github:GaloisInc/flakes#cvc5.v${{ matrix.cvc5 }} \
            github:GaloisInc/flakes#stp.v${{ matrix.stp }} \
            github:GaloisInc/flakes#yices.v${{ matrix.yices }} \
            github:GaloisInc/flakes#z3.v${{ matrix.z3 }} \
            -c cabal test

      - name: Documentation
        shell: bash
        run: |
          cd what4
          $DO_IN_NIX_SHELL -c cabal haddock what4

      - uses: actions/cache/save@v4
        name: Save cabal store cache
        if: always()
        with:
          path: |
            ${{ steps.setup-haskell.outputs.cabal-store }}
            dist-newstyle
          key: ${{ steps.cache.outputs.cache-primary-key }}
