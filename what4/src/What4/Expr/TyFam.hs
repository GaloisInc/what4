{-|
Module      : What4.Expr.TyFam
Copyright   : (c) Galois Inc, 2020
License     : BSD3
Maintainer  : rdockins@galois.com

This module defines some type families and aliases
that are key aspects of the expression builder
datatypes.
-}

{-# LANGUAGE ConstraintKinds #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE TypeFamilies #-}

module What4.Expr.TyFam where

import Data.Kind (Type)
import Text.PrettyPrint.ANSI.Leijen (Pretty)

-- | The @ExprNonceBrand@ type family maps the
--   configuration type @t@ to a type brand that
--   is used to tie the expressions generated
--   by an @ExprBuilder@ to the associated
--   @NonceGenerator@.
--
--   Depending on how clients intend to use this
--   library, this will generally either map to
--   @GlobalNonceGenerator@, or to an abstract
--   phantom type generated by the @withNonceGenerator@
--   combinator.
type family ExprNonceBrand (t :: Type) :: Type

-- | @ExprLoc@ is a type family that indicates what
--   type of values should be used as source locations.
--   This type family directly controls the @SymLoc@
--   type family from "What4.Interface". The current location
--   can be manipulated with the `getCurrentProgramLoc` and
--   `setCurrentProgramLoc` operations.
--
--   When an expression is created, the current source location
--   is recorded in the term for debugging and diagnostic
--   purposes.
type family ExprLoc (t :: Type) :: Type


-- | @IsExprLoc@ collects together class constraints
--   on @ExprLoc@ that are necessary to store expressions
--   in datastructures and define the pretty-printer.
type IsExprLoc t = (Ord (ExprLoc t), Pretty (ExprLoc t))
